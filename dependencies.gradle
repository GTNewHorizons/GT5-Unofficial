/*
 * Add your dependencies here. Supported configurations:
 *  - api("group:name:version:classifier"): if you use the types from this dependency in the public API of this mod
 *       Available at runtime and compiletime for mods depending on this mod
 *  - implementation("g:n:v:c"): if you need this for internal implementation details of the mod, but none of it is visible via the public API
 *       Available at runtime but not compiletime for mods depending on this mod
 *  - compileOnly("g:n:v:c"): if the mod you're building doesn't need this dependency during runtime at all, e.g. for optional mods
 *       Not available at all for mods depending on this mod, only visible at compiletime for this mod
 *  - compileOnlyApi("g:n:v:c"): like compileOnly, but also visible at compiletime for mods depending on this mod
 *       Available at compiletime but not runtime for mods depending on this mod
 *  - runtimeOnlyNonPublishable("g:n:v:c"): if you want to include a mod in this mod's runClient/runServer runs, but not publish it as a dependency
 *       Not available at all for mods depending on this mod, only visible at runtime for this mod
 *  - devOnlyNonPublishable("g:n:v:c"): a combination of runtimeOnlyNonPublishable and compileOnly for dependencies present at both compiletime and runtime,
 *       but not published as Maven dependencies - useful for RFG-deobfuscated dependencies or local testing
 *  - runtimeOnly("g:n:v:c"): if you don't need this at compile time, but want it to be present at runtime
 *       Available at runtime for mods depending on this mod
 *  - annotationProcessor("g:n:v:c"): mostly for java compiler plugins, if you know you need this, use it, otherwise don't worry
 *  - testCONFIG("g:n:v:c") - replace CONFIG by one of the above (except api), same as above but for the test sources instead of main
 *
 *  - shadowImplementation("g:n:v:c"): effectively the same as API, but the dependency is included in your jar under a renamed package name
 *       Requires you to enable usesShadowedDependencies in gradle.properties
 *
 *  - compile("g:n:v:c"): deprecated, replace with "api" (works like the old "compile") or "implementation" (can be more efficient)
 *
 * You can exclude transitive dependencies (dependencies of the chosen dependency) by appending { transitive = false } if needed,
 * but use this sparingly as it can break using your mod as another mod's dependency if you're not careful.
 *
 * To depend on obfuscated jars you can use `devOnlyNonPublishable(rfg.deobf("dep:spec:1.2.3"))` to fetch an obfuscated jar from maven,
 * or `devOnlyNonPublishable(rfg.deobf(project.files("libs/my-mod-jar.jar")))` to use a file.
 *
 * Gradle names for some of the configuration can be misleading, compileOnlyApi and runtimeOnly both get published as dependencies in Maven, but compileOnly does not.
 * The buildscript adds runtimeOnlyNonPublishable to also have a runtime dependency that's not published.
 *
 * For more details, see https://docs.gradle.org/8.0.1/userguide/java_library_plugin.html#sec:java_library_configurations_graph
 */
dependencies {
    api("com.github.GTNewHorizons:StructureLib:1.3.6:dev")
    api("net.industrial-craft:industrialcraft-2:2.2.828-experimental:dev")
    api("com.github.GTNewHorizons:NotEnoughItems:2.6.46-GTNH:dev")
    api("com.github.GTNewHorizons:NotEnoughIds:2.1.6:dev")
    api("com.github.GTNewHorizons:GTNHLib:0.5.20:dev")
    api("com.github.GTNewHorizons:ModularUI:1.2.17:dev")
    api("com.github.GTNewHorizons:ModularUI2:2.1.16-1.7.10:dev")
    api("com.github.GTNewHorizons:waila:1.8.2:dev")
    api("com.github.GTNewHorizons:Applied-Energistics-2-Unofficial:rv3-beta-478-GTNH:dev")
    api("com.github.GTNewHorizons:AE2FluidCraft-Rework:1.3.50-gtnh:dev")
    api('com.github.GTNewHorizons:Yamcl:0.6.0:dev')
    api("com.github.GTNewHorizons:Postea:1.0.13:dev")

    compileOnlyApi('com.github.GTNewHorizons:ThaumicTinkerer:2.10.2:dev')
    compileOnlyApi("com.github.GTNewHorizons:Mobs-Info:0.4.7-GTNH:dev")
    compileOnlyApi("com.github.GTNewHorizons:Navigator:1.0.15:dev")
    implementation('com.github.GTNewHorizons:Baubles:1.0.4:dev') {transitive=false}
    // Required to prevent an older bauble api from Extra Utilities from loading first in the javac classpath
    compileOnly('com.github.GTNewHorizons:Baubles:1.0.4:dev') {transitive=false}

    devOnlyNonPublishable("com.github.GTNewHorizons:Infernal-Mobs:1.9.1-GTNH:dev")

    compileOnlyApi("com.github.GTNewHorizons:Avaritia:1.54:dev")

    compileOnlyApi('com.github.GTNewHorizons:Angelica:1.0.0-beta23:api') { transitive = false }
    compileOnlyApi("com.github.GTNewHorizons:AppleCore:3.3.4:dev") { transitive = false }
    compileOnlyApi("com.github.GTNewHorizons:BuildCraft:7.1.39:dev") { transitive = false }
    compileOnlyApi("com.github.GTNewHorizons:EnderIO:2.8.22:dev") { transitive = false }
    compileOnlyApi("com.github.GTNewHorizons:ForestryMC:4.9.19:dev") { transitive = false }
    compileOnlyApi("com.github.GTNewHorizons:ProjectRed:4.10.5-GTNH:dev") { transitive = false }
    compileOnlyApi("com.github.GTNewHorizons:Railcraft:9.15.15:dev") { transitive = false }

    compileOnly("TGregworks:TGregworks:1.7.10-GTNH-1.0.27:deobf") {transitive = false}
    compileOnly("com.github.GTNewHorizons:ThaumicBases:1.7.7:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:EnderCore:0.4.6:dev") { transitive = false }
    compileOnly('com.github.GTNewHorizons:VisualProspecting:1.3.28:dev') { transitive = false }
    compileOnly("com.github.GTNewHorizons:Galaxy-Space-GTNH:1.1.97-GTNH:dev") { transitive = false }

    compileOnlyApi("com.github.GTNewHorizons:Galacticraft:3.2.5-GTNH:dev") { transitive = false }
    implementation("com.github.GTNewHorizons:TinkersConstruct:1.12.16-GTNH:dev")

    compileOnly("com.github.GTNewHorizons:Chisel:2.15.3-GTNH:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:Translocators:1.2.1:dev") { transitive = false }
    compileOnly rfg.deobf("curse.maven:cofh-core-69162:2388751")
    compileOnly("com.github.GTNewHorizons:Nuclear-Control:2.6.7:dev") { transitive = false }
    compileOnly("thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev") { transitive = false }
    implementation("com.github.GTNewHorizons:Hodgepodge:2.5.81:dev")
    compileOnly('com.github.GTNewHorizons:Botania:1.11.5-GTNH:dev') { transitive = false }
    compileOnly('com.github.GTNewHorizons:HoloInventory:2.4.13-GTNH:dev') { transitive = false }
    compileOnly rfg.deobf("curse.maven:extra-utilities-225561:2264384")
    compileOnly rfg.deobf('curse.maven:minefactory-reloaded-66672:2366150')
    compileOnly("com.github.GTNewHorizons:OpenComputers:1.10.27-GTNH:dev") {transitive = false}
    // https://www.curseforge.com/minecraft/mc-mods/advancedsolarpanels
    compileOnlyApi rfg.deobf('curse.maven:advsolar-362768:2885953')
    compileOnly('com.github.GTNewHorizons:ThaumicEnergistics:1.6.27-GTNH:dev') {transitive =  false}
    compileOnly("com.github.GTNewHorizons:BloodMagic:1.6.9:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:CraftTweaker:3.4.0:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:BetterLoadingScreen:1.7.0-GTNH:dev") { transitive = false }
    compileOnly rfg.deobf("curse.maven:biomes-o-plenty-220318:2499612")

    compileOnly('com.github.GTNewHorizons:SC2:2.2.0:dev') {transitive=false}
    compileOnly('com.github.GTNewHorizons:Binnie:2.4.4:dev') {transitive = false}
    compileOnly('curse.maven:PlayerAPI-228969:2248928') {transitive=false}
    devOnlyNonPublishable('com.github.GTNewHorizons:BlockRenderer6343:1.2.15:dev'){transitive=false}

    compileOnly("com.google.auto.value:auto-value-annotations:1.10.1") { transitive = false }
    annotationProcessor("com.google.auto.value:auto-value:1.10.1")

    // For testing forestry integration (iApiary, combs, tree growth simulator)
    // runtimeOnlyNonPublishable("com.github.GTNewHorizons:ForestryMC:4.9.19:dev")
    // runtimeOnlyNonPublishable('com.github.GTNewHorizons:neiaddons:1.16.0:dev')
    // runtimeOnlyNonPublishable('com.github.GTNewHorizons:MagicBees:2.8.5-GTNH:dev')
    // runtimeOnlyNonPublishable('com.github.GTNewHorizons:Binnie:2.4.4:dev')

    testImplementation(platform('org.junit:junit-bom:5.9.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation("org.mockito:mockito-core:3.+")

    functionalTestImplementation(platform('org.junit:junit-bom:5.9.2'))
    functionalTestImplementation('org.junit.jupiter:junit-jupiter')
    functionalTestImplementation('org.junit.platform:junit-platform-engine')
    functionalTestImplementation('org.junit.platform:junit-platform-launcher')
    functionalTestImplementation('org.junit.platform:junit-platform-reporting')

    runtimeOnlyNonPublishable("com.github.GTNewHorizons:DuraDisplay:1.3.4:dev")
    runtimeOnlyNonPublishable('com.github.GTNewHorizons:EnderIO:2.8.22:dev')

    // For testing
    //runtimeOnlyNonPublishable('com.github.GTNewHorizons:TCNEIAdditions:1.4.2:dev')

    // Speeds up mod identification and loading in dev
    runtimeOnlyNonPublishable(rfg.deobf("CoreTweaks:CoreTweaks:0.3.3.2"))
}
