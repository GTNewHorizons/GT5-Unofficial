/*
 * Copyright (c) 2018-2020 bartimaeusnek Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following
 * conditions: The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

package com.github.bartimaeusnek.bartworks.common.loaders;

import static gregtech.api.enums.Mods.Gendustry;
import static gregtech.api.enums.Mods.GregTech;
import static gregtech.api.recipe.RecipeMaps.centrifugeRecipes;
import static gregtech.api.util.GT_RecipeBuilder.SECONDS;

import java.awt.Color;

import net.minecraft.block.Block;
import net.minecraft.item.ItemStack;
import net.minecraft.util.IIcon;
import net.minecraftforge.fluids.Fluid;
import net.minecraftforge.fluids.FluidRegistry;
import net.minecraftforge.fluids.FluidStack;

import com.github.bartimaeusnek.bartworks.API.SideReference;
import com.github.bartimaeusnek.bartworks.client.renderer.RendererGlasBlock;
import com.github.bartimaeusnek.bartworks.client.renderer.RendererSwitchingColorFluid;
import com.github.bartimaeusnek.bartworks.common.blocks.BioFluidBlock;
import com.github.bartimaeusnek.bartworks.common.tileentities.classic.BWTileEntityDimIDBridge;
import com.github.bartimaeusnek.bartworks.util.BioCulture;

import cpw.mods.fml.client.registry.RenderingRegistry;
import cpw.mods.fml.common.registry.GameRegistry;
import gregtech.api.GregTech_API;
import gregtech.api.enums.FluidState;
import gregtech.api.enums.GT_Values;
import gregtech.api.enums.Materials;
import gregtech.api.enums.TierEU;
import gregtech.api.fluid.GT_FluidFactory;
import gregtech.api.util.GT_Utility;
import gregtech.common.items.GT_MetaGenerated_Item_98;

public class FluidLoader {

    public static IIcon autogenIIcon;
    public static Fluid ff;
    public static int renderID;
    public static Block bioFluidBlock;
    public static Fluid[] BioLabFluidMaterials;
    public static ItemStack[] BioLabFluidCells;

    // OilProcessing chain
    public static Fluid fulvicAcid, heatedfulvicAcid, Kerogen;

    public static void run() {
        renderID = RenderingRegistry.getNextAvailableRenderId();
        ff = new Fluid("BWfakeFluid");
        GregTech_API.sGTBlockIconload.add(
            () -> ff.setIcons(
                GregTech_API.sBlockIcons
                    .registerIcon(GregTech.getResourcePath("fluids", "fluid.molten.autogenerated"))));
        fulvicAcid = createAndRegisterFluid("Fulvic Acid", new Color(20, 20, 20));
        heatedfulvicAcid = createAndRegisterFluid("Heated Fulvic Acid", new Color(40, 20, 20), 720);
        Kerogen = createAndRegisterFluid("Kerogen", new Color(85, 85, 85));
        BioLabFluidMaterials = new Fluid[] { createAndRegisterFluid("FluorecentdDNA", new Color(125, 50, 170)),
            createAndRegisterFluid("EnzymesSollution", new Color(240, 200, 125)),
            createAndRegisterFluid("Penicillin", new Color(255, 255, 255)),
            createAndRegisterFluid("Polymerase", new Color(110, 180, 110)) };

        BioLabFluidCells = new ItemStack[BioLabFluidMaterials.length];

        GT_MetaGenerated_Item_98.FluidCell[] fluidCells = { GT_MetaGenerated_Item_98.FluidCell.FLUORESCENT_DNA,
            GT_MetaGenerated_Item_98.FluidCell.ENZYME_SOLUTION, GT_MetaGenerated_Item_98.FluidCell.PENICILLIN,
            GT_MetaGenerated_Item_98.FluidCell.POLYMERASE, };
        for (int i = 0; i < fluidCells.length; i++) {
            BioLabFluidCells[i] = fluidCells[i].get();
        }

        FluidStack dnaFluid = Gendustry.isModLoaded() ? FluidRegistry.getFluidStack("liquiddna", 100)
            : Materials.Biomass.getFluid(100L);
        for (BioCulture B : BioCulture.BIO_CULTURE_ARRAY_LIST) {
            if (B.isBreedable()) {
                B.setFluid(
                    GT_FluidFactory.builder(
                        B.getName()
                            .replace(" ", "")
                            .toLowerCase() + "fluid")
                        .withTextureName("molten.autogenerated")
                        .withColorRGBA(
                            new short[] { (short) B.getColor()
                                .getRed(),
                                (short) B.getColor()
                                    .getBlue(),
                                (short) B.getColor()
                                    .getGreen() })
                        .withLocalizedName(B.getLocalisedName() + " Fluid")
                        .withStateAndTemperature(FluidState.LIQUID, 300)
                        .buildAndRegister()
                        .asFluid());

                GT_Values.RA.stdBuilder()
                    .itemInputs(GT_Utility.getIntegratedCircuit(10))
                    .fluidInputs(new FluidStack(B.getFluid(), 1000))
                    .fluidOutputs(dnaFluid)
                    .duration(25 * SECONDS)
                    .eut(TierEU.RECIPE_MV)
                    .addTo(centrifugeRecipes);
            }
        }

        bioFluidBlock = new BioFluidBlock();
        GameRegistry.registerBlock(bioFluidBlock, "coloredFluidBlock");
        GameRegistry.registerTileEntity(BWTileEntityDimIDBridge.class, "bwTEDimIDBridge");
        if (SideReference.Side.Client) {
            RendererSwitchingColorFluid.register();
            RendererGlasBlock.register();
        }
    }

    public static Fluid createAndRegisterFluid(String Name, Color color) {
        return GT_FluidFactory.builder(Name)
            .withTextureName("molten.autogenerated")
            .withColorRGBA(
                new short[] { (short) color.getRed(), (short) color.getGreen(), (short) color.getBlue(),
                    (short) color.getAlpha() })
            .withStateAndTemperature(FluidState.LIQUID, 300)
            .buildAndRegister()
            .asFluid();
    }

    public static Fluid createAndRegisterFluid(String Name, Color color, int temperature) {
        return GT_FluidFactory.builder(Name)
            .withTextureName("molten.autogenerated")
            .withColorRGBA(
                new short[] { (short) color.getRed(), (short) color.getGreen(), (short) color.getBlue(),
                    (short) color.getAlpha() })
            .withStateAndTemperature(FluidState.LIQUID, temperature)
            .buildAndRegister()
            .asFluid();
    }
}
