/*
 * Copyright (c) 2018-2020 bartimaeusnek Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following
 * conditions: The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

package com.github.bartimaeusnek.bartworks.common.loaders;

import static gregtech.api.enums.GT_Values.VN;
import static gregtech.api.enums.Mods.BartWorks;
import static gregtech.api.enums.Mods.BloodArsenal;
import static gregtech.api.enums.Mods.Botania;
import static gregtech.api.enums.Mods.Botany;
import static gregtech.api.enums.Mods.Chisel;
import static gregtech.api.enums.Mods.EnderIO;
import static gregtech.api.enums.Mods.ExtraUtilities;
import static gregtech.api.enums.Mods.GalaxySpace;
import static gregtech.api.enums.Mods.HardcoreEnderExpansion;
import static gregtech.api.enums.Mods.IndustrialCraft2;
import static gregtech.api.enums.Mods.Minecraft;
import static gregtech.api.enums.Mods.Natura;
import static gregtech.api.enums.Mods.Railcraft;
import static gregtech.api.enums.Mods.RandomThings;
import static gregtech.api.enums.Mods.TecTech;
import static gregtech.api.enums.Mods.TinkerConstruct;
import static gregtech.api.enums.Mods.Witchery;
import static gregtech.api.enums.Mods.ZTones;

import java.util.Map;

import com.github.bartimaeusnek.bartworks.API.BorosilicateGlass;
import net.minecraft.item.ItemStack;
import net.minecraftforge.oredict.OreDictionary;

import com.github.bartimaeusnek.bartworks.API.GlassTier;

/**
 * Autogenerated run file, script Created on Wed Jan 2 19:11:07 2019 by boubou_19 and bartimaeusnek Executed on
 * 2019-01-03 02:08:43 modified by bartimaeusnek to only add blocks that mods are loaded modified by bartimaeusnek on
 * 2020-03-22 00:20 to run statically modified by Quarri6343 on 2022-08-24 20:02 to add Botania Support
 */
public class RegisterGlassTiers {

    public static void run() {

        // This feels like it should happen after registration, but it wasn't before refactoring. So I will leave it be for now...

        // Register glass ore dict entries.
        for (Map.Entry<GlassTier.BlockMetaPair, Integer> pair : GlassTier.getGlassMap()
            .entrySet()) {
            String oreName = "blockGlass" + VN[pair.getValue()];
            ItemStack itemStack = new ItemStack(
                pair.getKey()
                    .getBlock(),
                1,
                pair.getKey()
                    .getMeta());
            OreDictionary.registerOre(oreName, itemStack);
        }

        // ---------------------------------------------------------------------
        // Register glass.
        // ---------------------------------------------------------------------

        GlassTier.addCustomGlass(BorosilicateGlass.getGlassBlock(), 0, 3);
        GlassTier.addCustomGlass(BorosilicateGlass.getGlassBlock(), 1, 4);
        GlassTier.addCustomGlass(BorosilicateGlass.getGlassBlock(), 2, 5);
        GlassTier.addCustomGlass(BorosilicateGlass.getGlassBlock(), 3, 6);
        GlassTier.addCustomGlass(BorosilicateGlass.getGlassBlock(), 4, 7);
        GlassTier.addCustomGlass(BorosilicateGlass.getGlassBlock(), 5, 8);

        // Stained boro glass
        GlassTier.addCustomGlass(BorosilicateGlass.getGlassBlock(), 6, 3);
        GlassTier.addCustomGlass(BorosilicateGlass.getGlassBlock(), 7, 3);
        GlassTier.addCustomGlass(BorosilicateGlass.getGlassBlock(), 8, 3);
        GlassTier.addCustomGlass(BorosilicateGlass.getGlassBlock(), 9, 3);
        GlassTier.addCustomGlass(BorosilicateGlass.getGlassBlock(), 10, 3);
        GlassTier.addCustomGlass(BorosilicateGlass.getGlassBlock(), 11, 3);

        // Incrementing tiers
        GlassTier.addCustomGlass(BorosilicateGlass.getGlassBlock(), 12, 5);
        GlassTier.addCustomGlass(BorosilicateGlass.getGlassBlock(), 13, 9);
        GlassTier.addCustomGlass(BorosilicateGlass.getGlassBlock(), 14, 10);
        GlassTier.addCustomGlass(BorosilicateGlass.getGlassBlock(), 15, 11);

        // Glass block 2 for transcendent (Really?)
        GlassTier.addCustomGlass(BorosilicateGlass.getGlassBlock2(), 0, 12);

        for (int i = 0; i < 16; i++) {
            GlassTier.addCustomGlass(Minecraft.ID, "stained_glass", i, 3);
        }

        GlassTier.addCustomGlass(IndustrialCraft2.ID, "blockAlloyGlass", 0, 4);

        if (BloodArsenal.isModLoaded()) {
            GlassTier.addCustomGlass(BloodArsenal.ID, "blood_stained_glass", 0, 3);
        }
        if (Botania.isModLoaded()) {
            GlassTier.addCustomGlass(Botania.ID, "manaGlass", 0, 4);
            GlassTier.addCustomGlass(Botania.ID, "elfGlass", 0, 5);
        }
        if (Botany.isModLoaded()) {
            GlassTier.addCustomGlass(Botany.ID, "stained", 0, 3);
        }

        if (Chisel.isModLoaded()) {
            GlassTier.addCustomGlass(Chisel.ID, "glass2", 0, 3);

            for (int i = 0; i < 16; i++) {
                GlassTier.addCustomGlass(Chisel.ID, "glass", i, 3);
                GlassTier.addCustomGlass(Chisel.ID, "stained_glass_white", i, 3);
                GlassTier.addCustomGlass(Chisel.ID, "stained_glass_yellow", i, 3);
                GlassTier.addCustomGlass(Chisel.ID, "stained_glass_lightgray", i, 3);
                GlassTier.addCustomGlass(Chisel.ID, "stained_glass_brown", i, 3);
                GlassTier.addCustomGlass(Chisel.ID, "stained_glass_forestry", i, 3);
            }
        }

        if (EnderIO.isModLoaded()) {
            for (int i = 0; i <= 5; ++i) {
                GlassTier.addCustomGlass(EnderIO.ID, "blockFusedQuartz", i, 3);
            }
        }

        if (ExtraUtilities.isModLoaded()) {
            GlassTier.addCustomGlass(ExtraUtilities.ID, "decorativeBlock1", 9, 3);
            for (int i = 0; i < 12; ++i) {
                GlassTier.addCustomGlass(ExtraUtilities.ID, "decorativeBlock2", i, 3);
            }

            for (int i = 0; i < 6; ++i) {
                GlassTier.addCustomGlass(ExtraUtilities.ID, "etherealglass", i, 3);

            }
        }

        if (GalaxySpace.isModLoaded()) {
            GlassTier.addCustomGlass(GalaxySpace.ID, "futureglass", 0, 3);
            for (int i = 0; i < 16; i++) {
                GlassTier.addCustomGlass(GalaxySpace.ID, "futureglasses", i, 3);
            }
        }

        if (HardcoreEnderExpansion.isModLoaded()) {
            GlassTier.addCustomGlass(HardcoreEnderExpansion.ID, "laboratory_glass", 0, 3);
        }

        if (IndustrialCraft2.isModLoaded()) {
            GlassTier.addCustomGlass(Minecraft.ID, "glass", 0, 3);
        }

        if (Natura.isModLoaded()) {
            for (int i = 0; i <= 1; ++i) {
                GlassTier.addCustomGlass(Natura.ID, "NetherGlass", i, 3);
            }
        }

        if (Railcraft.isModLoaded()) {
            for (int i = 0; i < 16; i++) {
                GlassTier.addCustomGlass(Railcraft.ID, "glass", i, 3);
            }
        }

        if (RandomThings.isModLoaded()) {
            GlassTier.addCustomGlass(RandomThings.ID, "spectreGlass", 0, 3);
        }

        if (TinkerConstruct.isModLoaded()) {
            GlassTier.addCustomGlass(TinkerConstruct.ID, "GlassBlock", 0, 3);

            for (int i = 0; i < 16; i++) {
                GlassTier.addCustomGlass(TinkerConstruct.ID, "GlassBlock.StainedClear", i, 3);
            }
        }

        GlassTier.addCustomGlass(TecTech.ID, "tile.quantumGlass", 0, 8);

        if (Witchery.isModLoaded()) {
            for (int i = 0; i < 16; i++) {
                GlassTier.addCustomGlass(Witchery.ID, "shadedglass", i, 3);
            }
        }

        if (ZTones.isModLoaded()) {
            for (int i = 0; i < 16; i++) {
                GlassTier.addCustomGlass(ZTones.ID, "tile.glaxx", i, 3);
            }
        }
    }
}
