package gregtech.api.enums;

import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.function.Supplier;

import net.minecraft.enchantment.Enchantment;

import gregtech.api.objects.MaterialStack;

public class MaterialBuilder {

    public enum FuelType {

        Diesel(0),
        Gas(1),
        Thermal(2),
        SemiFluid(3),
        Plasma(4),
        Magic(5);

        final private int index;

        FuelType(int index) {
            this.index = index;
        }

        public int getIndex() {
            return index;
        }
    }

    private String name;
    private String defaultLocalName;
    private Element element;
    private String chemicalFormula;
    private boolean unifiable = true;
    private TextureSet iconSet = TextureSet.SET_NONE;
    private Dyes color = Dyes._NULL;
    private int argb = 0x00ffffff;
    private int argbMolten = 0x00ffffff;
    private int toolDurability = 0;
    private int toolQuality = 0;
    private float toolSpeed = 1.0f;
    private Supplier<Enchantment> pendingToolEnchantment;
    private int toolEnchantmentLevel = 1;
    private Supplier<Enchantment> pendingArmorEnchantment;
    private int armorEnchantmentLevel = 1;
    private float steamMultiplier = 1.0f;
    private float gasMultiplier = 1.0f;
    private float plasmaMultiplier = 1.0f;
    private FuelType fuelType = FuelType.Diesel;
    private int fuelPower = 0;
    private boolean generateDustItems = false;
    private boolean generateMetalItems = false;
    private boolean generateGemItems = false;
    private boolean generateOreItems = false;
    private boolean generateCell = false;
    private boolean generatePlasma = false;
    private boolean generateToolHeadItems = false;
    private boolean generateGearItems = false;
    private boolean generateEmpty = false;
    private boolean generateFluid = false;
    private boolean generateGas = false;
    private int extraData = 0;
    private boolean canBeCracked = false;
    private float heatDamage = 0.0f;
    private int meltingPoint = 0;
    private int blastFurnaceTemp = 0;
    private boolean blastFurnaceRequired = false;
    private boolean autoGenerateBlastFurnaceRecipes = true;
    private boolean autoGeneratedVacuumFreezerRecipes = true;
    private boolean autoGeneratedRecycleRecipes = true;
    private int densityMultiplier = 1;
    private int densityDivider = 1;
    private int oreMultiplier = 1;
    private final List<MaterialStack> materialList = new ArrayList<>();
    private final List<TCAspects.TC_AspectStack> aspects = new ArrayList<>();
    private final List<Supplier<Materials>> pendingOreByproducts = new ArrayList<>();
    private Supplier<Materials> pendingSmeltingInto;
    private Supplier<Materials> pendingMaceratingInto;
    private Supplier<Materials> pendingArcSmeltingInto;
    private Supplier<Materials> pendingDirectSmelting;
    private final LinkedHashSet<SubTag> subTags = new LinkedHashSet<>();
    private final List<OrePrefixes> orePrefixBlacklist = new ArrayList<>();
    private final List<OrePrefixes> orePrefixWhitelist = new ArrayList<>();

    public MaterialBuilder() {}

    public Materials constructMaterial() {
        Materials material = new Materials(
            // spotless:off
            name,
            defaultLocalName,
            element,
            chemicalFormula,
            unifiable,
            iconSet,
            color,
            argb, argbMolten,
            toolDurability, toolQuality, toolSpeed,
            pendingToolEnchantment, toolEnchantmentLevel,
            pendingArmorEnchantment, armorEnchantmentLevel,
            steamMultiplier, gasMultiplier, plasmaMultiplier,
            fuelType.getIndex(), fuelPower,
            generateDustItems,
            generateMetalItems,
            generateGemItems,
            generateOreItems,
            generateCell,
            generatePlasma,
            generateToolHeadItems,
            generateGearItems,
            generateEmpty,
            generateFluid,
            generateGas,
            extraData,
            canBeCracked,
            heatDamage,
            meltingPoint,
            blastFurnaceTemp,
            blastFurnaceRequired,
            autoGenerateBlastFurnaceRecipes,
            autoGeneratedVacuumFreezerRecipes,
            autoGeneratedRecycleRecipes,
            densityMultiplier, densityDivider,
            oreMultiplier,
            materialList,
            aspects,
            pendingOreByproducts,
            pendingSmeltingInto,
            pendingMaceratingInto,
            pendingArcSmeltingInto,
            pendingDirectSmelting,
            subTags
            // spotless:on
        );

        for (SubTag subTag : subTags) subTag.addContainerToList(material);
        for (OrePrefixes prefix : orePrefixBlacklist) prefix.mNotGeneratedItems.add(material);
        for (OrePrefixes prefix : orePrefixWhitelist) prefix.mGeneratedItems.add(material);

        return material;
    }

    /** Sets the internal material name. */
    public MaterialBuilder setName(String name) {
        this.name = name;
        return this;
    }

    /** Sets the default localized display name. */
    public MaterialBuilder setDefaultLocalName(String defaultLocalName) {
        this.defaultLocalName = defaultLocalName;
        return this;
    }

    public MaterialBuilder setElement(Element element) {
        this.element = element;
        return this;
    }

    /** Set the chemical formula of the material. This overrides auto-generated formulas. */
    public MaterialBuilder setChemicalFormula(String chemicalFormula) {
        this.chemicalFormula = chemicalFormula;
        return this;
    }

    public MaterialBuilder setUnifiable(boolean unifiable) {
        this.unifiable = unifiable;
        return this;
    }

    public MaterialBuilder setIconSet(TextureSet iconSet) {
        this.iconSet = iconSet;
        return this;
    }

    /** Sets the Vanilla Minecraft color. Use the one that most closely resembles the color of the material. */
    public MaterialBuilder setColor(Dyes color) {
        this.color = color;
        return this;
    }

    /** Sets {@link MaterialBuilder#argb} and {@link MaterialBuilder#argbMolten}. */
    public MaterialBuilder setARGB(int argb) {
        this.argb = argb;
        this.argbMolten = argb;
        return this;
    }

    /** Use after {@link MaterialBuilder#setARGB(int)} to override {@link MaterialBuilder#argbMolten}. */
    public MaterialBuilder setMoltenARGB(int argb) {
        this.argbMolten = argb;
        return this;
    }

    public MaterialBuilder setTool(int durability, int quality, float speed) {
        this.toolDurability = durability;
        this.toolQuality = quality;
        this.toolSpeed = speed;
        return this;
    }

    public MaterialBuilder setToolEnchantment(Supplier<Enchantment> enchantment, int level) {
        this.pendingToolEnchantment = enchantment;
        this.toolEnchantmentLevel = level;
        return this;
    }

    public MaterialBuilder setArmorEnchantment(Supplier<Enchantment> enchantment, int level) {
        this.pendingArmorEnchantment = enchantment;
        this.armorEnchantmentLevel = level;
        return this;
    }

    public MaterialBuilder setTurbine(float steamMultiplier, float gasMultiplier, float plasmaMultiplier) {
        this.steamMultiplier = steamMultiplier;
        this.gasMultiplier = gasMultiplier;
        this.plasmaMultiplier = plasmaMultiplier;
        return this;
    }

    public MaterialBuilder setFuel(FuelType fuelType, int fuelPower) {
        this.fuelType = fuelType;
        this.fuelPower = fuelPower;
        return this;
    }

    /**
     * Adds:
     * <ul>
     * <li>{@link OrePrefixes#dustTiny}</li>
     * <li>{@link OrePrefixes#dustSmall}</li>
     * <li>{@link OrePrefixes#dust}</li>
     * </ul>
     */
    public MaterialBuilder addDustItems() {
        this.generateDustItems = true;
        return this;
    }

    /**
     * Adds:
     * <ul>
     * <li>{@link OrePrefixes#ingotHot}</li>
     * <li>{@link OrePrefixes#ingot}</li>
     * <li>{@link OrePrefixes#dustTiny}</li>
     * <li>{@link OrePrefixes#dustSmall}</li>
     * <li>{@link OrePrefixes#dust}</li>
     * <li>{@link OrePrefixes#nugget}</li>
     * <li>{@link OrePrefixes#plateAlloy}</li>
     * <li>{@link OrePrefixes#plateSteamcraft}</li>
     * <li>{@link OrePrefixes#plateDense}</li>
     * <li>{@link OrePrefixes#plateSuperdense}</li>
     * <li>{@link OrePrefixes#plateQuintuple}</li>
     * <li>{@link OrePrefixes#plateQuadruple}</li>
     * <li>{@link OrePrefixes#plateTriple}</li>
     * <li>{@link OrePrefixes#plateDouble}</li>
     * <li>{@link OrePrefixes#plate}</li>
     * <li>{@link OrePrefixes#itemCasing}</li>
     * <li>{@link OrePrefixes#foil}</li>
     * <li>{@link OrePrefixes#stickLong}</li>
     * <li>{@link OrePrefixes#stick}</li>
     * <li>{@link OrePrefixes#round}</li>
     * <li>{@link OrePrefixes#bolt}</li>
     * <li>{@link OrePrefixes#comb}</li>
     * <li>{@link OrePrefixes#screw}</li>
     * <li>{@link OrePrefixes#ring}</li>
     * <li>{@link OrePrefixes#springSmall}</li>
     * <li>{@link OrePrefixes#spring}</li>
     * <li>{@link OrePrefixes#wireFine}</li>
     * <li>{@link OrePrefixes#handleMallet}</li>
     * </ul>
     */
    public MaterialBuilder addMetalItems() {
        this.generateMetalItems = true;
        return this;
    }

    /**
     * Adds:
     * <ul>
     * <li>{@link OrePrefixes#gemChipped}</li>
     * <li>{@link OrePrefixes#gemFlawed}</li>
     * <li>{@link OrePrefixes#gemFlawless}</li>
     * <li>{@link OrePrefixes#gemExquisite}</li>
     * <li>{@link OrePrefixes#gem}</li>
     * <li>{@link OrePrefixes#dustTiny}</li>
     * <li>{@link OrePrefixes#dustSmall}</li>
     * <li>{@link OrePrefixes#dust}</li>
     * <li>{@link OrePrefixes#plate}</li>
     * <li>{@link OrePrefixes#itemCasing}</li>
     * <li>{@link OrePrefixes#stickLong}</li>
     * <li>{@link OrePrefixes#stick}</li>
     * <li>{@link OrePrefixes#bolt}</li>
     * <li>{@link OrePrefixes#comb}</li>
     * <li>{@link OrePrefixes#screw}</li>
     * <li>{@link OrePrefixes#lens}</li>
     * <li>{@link OrePrefixes#crystal}</li>
     * <li>{@link OrePrefixes#handleMallet}</li>
     * </ul>
     */
    public MaterialBuilder addGemItems() {
        this.generateGemItems = true;
        return this;
    }

    /**
     * Adds:
     * <ul>
     * <li>{@link OrePrefixes#oreBlackgranite}</li>
     * <li>{@link OrePrefixes#oreRedgranite}</li>
     * <li>{@link OrePrefixes#oreMarble}</li>
     * <li>{@link OrePrefixes#oreBasalt}</li>
     * <li>{@link OrePrefixes#oreNetherrack}</li>
     * <li>{@link OrePrefixes#oreNether}</li>
     * <li>{@link OrePrefixes#oreDense}</li>
     * <li>{@link OrePrefixes#oreRich}</li>
     * <li>{@link OrePrefixes#oreNormal}</li>
     * <li>{@link OrePrefixes#oreSmall}</li>
     * <li>{@link OrePrefixes#orePoor}</li>
     * <li>{@link OrePrefixes#oreEndstone}</li>
     * <li>{@link OrePrefixes#oreEnd}</li>
     * <li>{@link OrePrefixes#ore}</li>
     * <li>{@link OrePrefixes#crushedCentrifuged}</li>
     * <li>{@link OrePrefixes#crushedPurified}</li>
     * <li>{@link OrePrefixes#crushed}</li>
     * <li>{@link OrePrefixes#rawOre}</li>
     * <li>{@link OrePrefixes#shard}</li>
     * <li>{@link OrePrefixes#clump}</li>
     * <li>{@link OrePrefixes#reduced}</li>
     * <li>{@link OrePrefixes#crystalline}</li>
     * <li>{@link OrePrefixes#cleanGravel}</li>
     * <li>{@link OrePrefixes#dirtyGravel}</li>
     * <li>{@link OrePrefixes#dustTiny}</li>
     * <li>{@link OrePrefixes#dustSmall}</li>
     * <li>{@link OrePrefixes#dust}</li>
     * <li>{@link OrePrefixes#dustImpure}</li>
     * <li>{@link OrePrefixes#dustRefined}</li>
     * <li>{@link OrePrefixes#dustPure}</li>
     * <li>{@link OrePrefixes#milled}</li>
     * </ul>
     */
    public MaterialBuilder addOreItems() {
        this.generateOreItems = true;
        return this;
    }

    /**
     * Adds:
     * <ul>
     * <li>{@link OrePrefixes#cell}</li>
     * <li>{@link OrePrefixes#bucket}</li>
     * <li>{@link OrePrefixes#bucketClay}</li>
     * <li>{@link OrePrefixes#bottle}</li>
     * <li>{@link OrePrefixes#capsule}</li>
     * </ul>
     */
    public MaterialBuilder addCell() {
        this.generateCell = true;
        return this;
    }

    /**
     * Adds:
     * <ul>
     * <li>{@link OrePrefixes#cellPlasma}</li>
     * </ul>
     */
    public MaterialBuilder addPlasma() {
        this.generatePlasma = true;
        return this;
    }

    public MaterialBuilder addToolHeadItems() {
        this.generateToolHeadItems = true;
        return this;
    }

    /**
     * Adds:
     * <ul>
     * <li>{@link OrePrefixes#rotor}</li>
     * <li>{@link OrePrefixes#gearGtSmall}</li>
     * <li>{@link OrePrefixes#gearGt}</li>
     * </ul>
     */
    public MaterialBuilder addGearItems() {
        this.generateGearItems = true;
        return this;
    }

    public MaterialBuilder addEmpty() {
        this.generateEmpty = true;
        return this;
    }

    public MaterialBuilder addFluid() {
        this.generateFluid = true;
        return this;
    }

    public MaterialBuilder addGas() {
        this.generateGas = true;
        return this;
    }

    public MaterialBuilder addElectrolyzerRecipe() {
        extraData = extraData | 1;
        return this;
    }

    public MaterialBuilder addCentrifugeRecipe() {
        extraData = extraData | 2;
        return this;
    }

    /** Add hydro- and steam-cracking recipes for this material. */
    public MaterialBuilder addCrackingRecipes() {
        this.canBeCracked = true;
        return this;
    }

    /** Sets the Heat Damage for this Material (negative = frost) */
    public MaterialBuilder setHeatDamage(float heatDamage) {
        this.heatDamage = heatDamage;
        return this;
    }

    public MaterialBuilder setMeltingPoint(int meltingPoint) {
        this.meltingPoint = meltingPoint;
        return this;
    }

    public MaterialBuilder setBlastFurnaceTemp(int blastFurnaceTemp) {
        this.blastFurnaceTemp = blastFurnaceTemp;
        return this;
    }

    public MaterialBuilder setBlastFurnaceRequired(boolean blastFurnaceRequired) {
        this.blastFurnaceRequired = blastFurnaceRequired;
        return this;
    }

    public MaterialBuilder setAutoGenerateBlastFurnaceRecipes(boolean autoGenerateBlastFurnaceRecipes) {
        this.autoGenerateBlastFurnaceRecipes = autoGenerateBlastFurnaceRecipes;
        return this;
    }

    public MaterialBuilder setAutoGeneratedVacuumFreezerRecipe(boolean autoGeneratedVacuumFreezerRecipes) {
        this.autoGeneratedVacuumFreezerRecipes = autoGeneratedVacuumFreezerRecipes;
        return this;
    }

    public MaterialBuilder setAutoGeneratedRecycleRecipes(boolean autoGeneratedRecycleRecipes) {
        this.autoGeneratedRecycleRecipes = autoGeneratedRecycleRecipes;
        return this;
    }

    public MaterialBuilder setDensity(int multiplier, int divider) {
        this.densityMultiplier = multiplier;
        this.densityDivider = divider;
        return this;
    }

    /** Sets the number of drops this ore yields for its main material. For example, Lapis Ore has a multiplier of 6. */
    public MaterialBuilder setOreMultiplier(int oreMultiplier) {
        this.oreMultiplier = oreMultiplier;
        return this;
    }

    public MaterialBuilder addMaterial(Materials material, int amount) {
        this.materialList.add(new MaterialStack(material, amount));
        return this;
    }

    /** Adds the {@link TCAspects} to the material. */
    public MaterialBuilder addAspect(TCAspects aspect, int amount) {
        this.aspects.add(new TCAspects.TC_AspectStack(aspect, amount));
        return this;
    }

    public MaterialBuilder addOreByproduct(Supplier<Materials> material) {
        pendingOreByproducts.add(material);
        return this;
    }

    /** Sets what this material smelts into. */
    public MaterialBuilder setSmeltingInto(Supplier<Materials> material) {
        pendingSmeltingInto = material;
        return this;
    }

    /** Sets what this material macerates into. */
    public MaterialBuilder setMaceratingInto(Supplier<Materials> material) {
        pendingMaceratingInto = material;
        return this;
    }

    /** Sets what this material arc smelts into. */
    public MaterialBuilder setArcSmeltingInto(Supplier<Materials> material) {
        pendingArcSmeltingInto = material;
        return this;
    }

    /** Sets what the ore of this material smelts into. */
    public MaterialBuilder setDirectSmelting(Supplier<Materials> material) {
        pendingDirectSmelting = material;
        return this;
    }

    /** Adds the {@link SubTag} to the material and registers the material with the tag upon construction. */
    public MaterialBuilder addSubTag(SubTag subTag) {
        this.subTags.add(subTag);
        return this;
    }

    /** Adds an {@link OrePrefixes} that should not be generated. */
    public MaterialBuilder removeOrePrefix(OrePrefixes prefix) {
        this.orePrefixBlacklist.add(prefix);
        return this;
    }

    /** Adds an {@link OrePrefixes} that will be generated. */
    public MaterialBuilder addOrePrefix(OrePrefixes prefix) {
        this.orePrefixWhitelist.add(prefix);
        return this;
    }
}
