package gregtech.api.enums;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.function.Supplier;

import gregtech.api.objects.MaterialStack;

public class MaterialBuilder {

    public enum FuelType {

        Diesel(0),
        Gas(1),
        Thermal(2),
        SemiFluid(3),
        Plasma(4),
        Magic(5);

        final private int index;

        FuelType(int index) {
            this.index = index;
        }

        public static FuelType fromIndex(int index) {
            return switch (index) {
                case 0 -> Diesel;
                case 1 -> Gas;
                case 2 -> Thermal;
                case 3 -> SemiFluid;
                case 4 -> Plasma;
                case 5 -> Magic;
                default -> throw new IllegalStateException("Invalid FuelType: " + index);
            };
        }

        public int getIndex() {
            return index;
        }
    }

    private int metaItemSubID = -1;
    private TextureSet iconSet = TextureSet.SET_NONE;
    private float toolSpeed = 1.0f;
    private int toolDurability = 0;
    private int toolQuality = 0;
    private int types = 0;
    private int argb = 0x00ffffff;
    private int argbMolten = 0x00ffffff;
    private String name;
    private String defaultLocalName;
    private FuelType fuelType = FuelType.Diesel;
    private int fuelPower = 0;
    private int meltingPoint = 0;
    private int blastFurnaceTemp = 0;
    private boolean blastFurnaceRequired = false;
    private boolean autoGenerateBlastFurnaceRecipes = true;
    private boolean autoGeneratedVacuumFreezerRecipe = true;
    private int densityMultiplier = 1;
    private int densityDivider = 1;
    private Dyes color = Dyes._NULL;
    private int extraData = 0;
    private List<MaterialStack> materialList = new ArrayList<>();
    private List<TCAspects.TC_AspectStack> aspects = new ArrayList<>();
    private final List<Supplier<Materials>> pendingOreByproducts = new ArrayList<>();
    private final LinkedHashSet<SubTag> subTags = new LinkedHashSet<>();
    private boolean hasFluid = false;
    private boolean hasGas = false;
    private boolean canBeCracked = false;
    private Element element;
    private String chemicalFormula;
    private float steamMultiplier = 1.0f;
    private float gasMultiplier = 1.0f;
    private float plasmaMultiplier = 1.0f;

    public MaterialBuilder() {}

    /** @deprecated Use {@link MaterialBuilder#MaterialBuilder()} instead. */
    @Deprecated
    public MaterialBuilder(int metaItemSubID, TextureSet iconSet, String defaultLocalName) {
        this.metaItemSubID = metaItemSubID;
        this.iconSet = iconSet;
        this.name = defaultLocalName.replace(" ", "")
            .replace("-", "");
        this.defaultLocalName = defaultLocalName;
    }

    public Materials constructMaterial() {
        Materials material = new Materials(
            // spotless:off
            name,
            defaultLocalName,
            element,
            chemicalFormula,
            metaItemSubID,
            iconSet,
            color,
            argb,
            argbMolten,
            toolDurability, toolQuality, toolSpeed,
            steamMultiplier, gasMultiplier, plasmaMultiplier,
            fuelType.getIndex(), fuelPower,
            hasFluid,
            hasGas,
            types,
            extraData,
            meltingPoint,
            blastFurnaceTemp,
            blastFurnaceRequired,
            autoGenerateBlastFurnaceRecipes,
            autoGeneratedVacuumFreezerRecipe,
            densityMultiplier,
            densityDivider,
            materialList,
            aspects,
            pendingOreByproducts,
            subTags
            // spotless:on
        ).setCanBeCracked(canBeCracked);

        for (SubTag subTag : subTags) subTag.addContainerToList(material);

        return material;
    }

    public MaterialBuilder setMetaItemSubID(int metaItemSubID) {
        this.metaItemSubID = metaItemSubID;
        return this;
    }

    public MaterialBuilder setIconSet(TextureSet iconSet) {
        this.iconSet = iconSet;
        return this;
    }

    public MaterialBuilder setDefaultLocalName(String defaultLocalName) {
        this.defaultLocalName = defaultLocalName;
        return this;
    }

    public MaterialBuilder setName(String name) {
        this.name = name;
        return this;
    }

    public MaterialBuilder addDustItems() {
        types = types | 1;
        return this;
    }

    public MaterialBuilder addMetalItems() {
        types = types | 2;
        return this;
    }

    public MaterialBuilder addGemItems() {
        types = types | 4;
        return this;
    }

    public MaterialBuilder addOreItems() {
        types = types | 8;
        return this;
    }

    public MaterialBuilder addCell() {
        types = types | 16;
        return this;
    }

    public MaterialBuilder addPlasma() {
        types = types | 32;
        return this;
    }

    public MaterialBuilder addToolHeadItems() {
        types = types | 64;
        return this;
    }

    public MaterialBuilder addGearItems() {
        types = types | 128;
        return this;
    }

    public MaterialBuilder addFluid() {
        this.hasFluid = true;
        return this;
    }

    public MaterialBuilder addGas() {
        this.hasGas = true;
        return this;
    }

    /** @deprecated Use `addXXX` methods instead. */
    @Deprecated
    public MaterialBuilder setTypes(int types) {
        this.types = types;
        return this;
    }

    /** Sets {@link MaterialBuilder#argb} and {@link MaterialBuilder#argbMolten}. */
    public MaterialBuilder setARGB(int argb) {
        this.argb = argb;
        this.argbMolten = argb;
        return this;
    }

    public MaterialBuilder setMoltenARGB(int argb) {
        this.argbMolten = argb;
        return this;
    }

    /** @deprecated Use {@link MaterialBuilder#setARGB(int)} instead. */
    @Deprecated
    public MaterialBuilder setRGBA(int r, int g, int b, int a) {
        this.argb = ((a & 0xFF) << 24) | ((r & 0xFF) << 16) | ((g & 0xFF) << 8) | (b & 0xFF);
        return this;
    }

    /** @deprecated Use {@link MaterialBuilder#setARGB(int)} instead. */
    public MaterialBuilder setRGB(int rgb) {
        this.argb = rgb;
        return this;
    }

    /** @deprecated Use {@link MaterialBuilder#setARGB(int)} instead. */
    @Deprecated
    public MaterialBuilder setRGB(int r, int g, int b) {
        this.argb = ((r & 0xFF) << 16) | ((g & 0xFF) << 8) | (b & 0xFF);
        return this;
    }

    /** @deprecated Add a transparent {@link SubTag} instead with {@link MaterialBuilder#addSubTag(SubTag)}. */
    @Deprecated
    public MaterialBuilder setTransparent(boolean transparent) {
        return this.addSubTag(SubTag.TRANSPARENT);
    }

    public MaterialBuilder setColor(Dyes color) {
        this.color = color;
        return this;
    }

    public MaterialBuilder setTool(int durability, int quality, float speed) {
        this.toolDurability = durability;
        this.toolQuality = quality;
        this.toolSpeed = speed;
        return this;
    }

    /** @deprecated Use {@link MaterialBuilder#setTool(int, int, float)} instead. */
    @Deprecated
    public MaterialBuilder setToolDurability(int toolDurability) {
        this.toolDurability = toolDurability;
        return this;
    }

    /** @deprecated Use {@link MaterialBuilder#setTool(int, int, float)} instead. */
    @Deprecated
    public MaterialBuilder setToolQuality(int toolQuality) {
        this.toolQuality = toolQuality;
        return this;
    }

    /** @deprecated Use {@link MaterialBuilder#setTool(int, int, float)} instead. */
    @Deprecated
    public MaterialBuilder setToolSpeed(float toolSpeed) {
        this.toolSpeed = toolSpeed;
        return this;
    }

    public MaterialBuilder setFuel(FuelType fuelType, int fuelPower) {
        this.fuelType = fuelType;
        this.fuelPower = fuelPower;
        return this;
    }

    /** @deprecated Use {@link MaterialBuilder#setFuel(FuelType, int)} instead. */
    @Deprecated
    public MaterialBuilder setFuelType(int fuelType) {
        this.fuelType = FuelType.fromIndex(fuelType);
        return this;
    }

    /** @deprecated Use {@link MaterialBuilder#setFuel(FuelType, int)} instead. */
    @Deprecated
    public MaterialBuilder setFuelPower(int fuelPower) {
        this.fuelPower = fuelPower;
        return this;
    }

    public MaterialBuilder setMeltingPoint(int meltingPoint) {
        this.meltingPoint = meltingPoint;
        return this;
    }

    public MaterialBuilder setBlastFurnaceTemp(int blastFurnaceTemp) {
        this.blastFurnaceTemp = blastFurnaceTemp;
        return this;
    }

    public MaterialBuilder setBlastFurnaceRequired(boolean blastFurnaceRequired) {
        this.blastFurnaceRequired = blastFurnaceRequired;
        return this;
    }

    public MaterialBuilder setAutoGenerateBlastFurnaceRecipes(boolean autoGenerateBlastFurnaceRecipes) {
        this.autoGenerateBlastFurnaceRecipes = autoGenerateBlastFurnaceRecipes;
        return this;
    }

    public MaterialBuilder setAutoGeneratedVacuumFreezerRecipe(boolean autoGeneratedVacuumFreezerRecipe) {
        this.autoGeneratedVacuumFreezerRecipe = autoGeneratedVacuumFreezerRecipe;
        return this;
    }

    /** @deprecated Ore values are no longer used. Remove if encountered. */
    @Deprecated
    public MaterialBuilder setOreValue(int oreValue) {
        return this;
    }

    public MaterialBuilder setDensity(int multiplier, int divider) {
        this.densityMultiplier = multiplier;
        this.densityDivider = divider;
        return this;
    }

    /** @deprecated Use {@link MaterialBuilder#setDensity(int, int)} instead. */
    @Deprecated
    public MaterialBuilder setDensityMultiplier(int densityMultiplier) {
        this.densityMultiplier = densityMultiplier;
        return this;
    }

    /** @deprecated Use {@link MaterialBuilder#setDensity(int, int)} instead. */
    @Deprecated
    public MaterialBuilder setDensityDivider(int densityDivider) {
        this.densityDivider = densityDivider;
        return this;
    }

    public MaterialBuilder addElectrolyzerRecipe() {
        extraData = extraData | 1;
        return this;
    }

    public MaterialBuilder addCentrifugeRecipe() {
        extraData = extraData | 2;
        return this;
    }

    /** @deprecated Use `addXXX` methods instead. */
    @Deprecated
    public MaterialBuilder setExtraData(int extraData) {
        this.extraData = extraData;
        return this;
    }

    public MaterialBuilder addMaterial(Materials material, int amount) {
        this.materialList.add(new MaterialStack(material, amount));
        return this;
    }

    /** @deprecated Use {@link MaterialBuilder#addMaterial(Materials, int)} instead. */
    @Deprecated
    public MaterialBuilder setMaterialList(List<MaterialStack> materialList) {
        this.materialList = materialList;
        return this;
    }

    /** @deprecated Use {@link MaterialBuilder#addMaterial(Materials, int)} instead. */
    @Deprecated
    public MaterialBuilder setMaterialList(MaterialStack... materials) {
        this.materialList = Arrays.asList(materials);
        return this;
    }

    public MaterialBuilder setElement(Element element) {
        this.element = element;
        return this;
    }

    public MaterialBuilder setChemicalFormula(String chemicalFormula) {
        this.chemicalFormula = chemicalFormula;
        return this;
    }

    public MaterialBuilder addAspect(TCAspects aspect, int amount) {
        this.aspects.add(new TCAspects.TC_AspectStack(aspect, amount));
        return this;
    }

    /** @deprecated Use {@link MaterialBuilder#addAspect(TCAspects, int)} instead. */
    @Deprecated
    public MaterialBuilder setAspects(List<TCAspects.TC_AspectStack> aspects) {
        this.aspects = aspects;
        return this;
    }

    public MaterialBuilder addSubTag(SubTag subTag) {
        this.subTags.add(subTag);
        return this;
    }

    public MaterialBuilder addOreByproduct(Supplier<Materials> material) {
        pendingOreByproducts.add(material);
        return this;
    }

    public MaterialBuilder setCanBeCracked(boolean canBeCracked) {
        this.canBeCracked = canBeCracked;
        return this;
    }

    public MaterialBuilder setTurbine(float steamMultiplier, float gasMultiplier, float plasmaMultiplier) {
        this.steamMultiplier = steamMultiplier;
        this.gasMultiplier = gasMultiplier;
        this.plasmaMultiplier = plasmaMultiplier;
        return this;
    }
}
