package gregtech.api.enums;

import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.function.Supplier;

import net.minecraft.enchantment.Enchantment;

import gregtech.api.objects.MaterialStack;

public class MaterialBuilder {

    public enum FuelType {

        Diesel(0),
        Gas(1),
        Thermal(2),
        SemiFluid(3),
        Plasma(4),
        Magic(5);

        final private int index;

        FuelType(int index) {
            this.index = index;
        }

        public int getIndex() {
            return index;
        }
    }

    private int metaItemSubID = -1;
    private TextureSet iconSet = TextureSet.SET_NONE;
    private float toolSpeed = 1.0f;
    private int toolDurability = 0;
    private int toolQuality = 0;
    private Enchantment toolEnchantment;
    private int toolEnchantmentLevel = 1;
    private Enchantment armorEnchantment;
    private int armorEnchantmentLevel = 1;
    private int argb = 0x00ffffff;
    private int argbMolten = 0x00ffffff;
    private String name;
    private String defaultLocalName;
    private FuelType fuelType = FuelType.Diesel;
    private int fuelPower = 0;
    private float heatDamage = 0.0f;
    private int meltingPoint = 0;
    private int blastFurnaceTemp = 0;
    private boolean blastFurnaceRequired = false;
    private boolean autoGenerateBlastFurnaceRecipes = true;
    private boolean autoGeneratedVacuumFreezerRecipes = true;
    private boolean autoGeneratedRecycleRecipes = true;
    private int densityMultiplier = 1;
    private int densityDivider = 1;
    private Dyes color = Dyes._NULL;
    private int extraData = 0;
    private final List<MaterialStack> materialList = new ArrayList<>();
    private final List<TCAspects.TC_AspectStack> aspects = new ArrayList<>();
    private final List<Supplier<Materials>> pendingOreByproducts = new ArrayList<>();
    private final LinkedHashSet<SubTag> subTags = new LinkedHashSet<>();
    private final List<OrePrefixes> orePrefixBlacklist = new ArrayList<>();
    private Supplier<Materials> pendingSmeltingInto;
    private Supplier<Materials> pendingMaceratingInto;
    private Supplier<Materials> pendingArcSmeltingInto;
    private Supplier<Materials> pendingDirectSmelting;
    private boolean generateDustItems = false;
    private boolean generateMetalItems = false;
    private boolean generateGemItems = false;
    private boolean generateOreItems = false;
    private boolean generateCell = false;
    private boolean generatePlasma = false;
    private boolean generateToolHeadItems = false;
    private boolean generateGearItems = false;
    private boolean generateEmpty = false;
    private boolean generateFluid = false;
    private boolean generateGas = false;
    private boolean canBeCracked = false;
    private Element element;
    private String chemicalFormula;
    private float steamMultiplier = 1.0f;
    private float gasMultiplier = 1.0f;
    private float plasmaMultiplier = 1.0f;

    public MaterialBuilder() {}

    public Materials constructMaterial() {
        Materials material = new Materials(
            // spotless:off
            name,
            defaultLocalName,
            element,
            chemicalFormula,
            metaItemSubID,
            iconSet,
            color,
            argb, argbMolten,
            toolDurability, toolQuality, toolSpeed,
            toolEnchantment, toolEnchantmentLevel,
            armorEnchantment, armorEnchantmentLevel,
            steamMultiplier, gasMultiplier, plasmaMultiplier,
            fuelType.getIndex(), fuelPower,
            generateDustItems,
            generateMetalItems,
            generateGemItems,
            generateOreItems,
            generateCell,
            generatePlasma,
            generateToolHeadItems,
            generateGearItems,
            generateEmpty,
            generateFluid,
            generateGas,
            extraData,
            canBeCracked,
            heatDamage,
            meltingPoint,
            blastFurnaceTemp,
            blastFurnaceRequired,
            autoGenerateBlastFurnaceRecipes,
            autoGeneratedVacuumFreezerRecipes,
            autoGeneratedRecycleRecipes,
            densityMultiplier, densityDivider,
            materialList,
            aspects,
            pendingOreByproducts,
            pendingSmeltingInto,
            pendingMaceratingInto,
            pendingArcSmeltingInto,
            pendingDirectSmelting,
            subTags
            // spotless:on
        );

        for (SubTag subTag : subTags) subTag.addContainerToList(material);
        for (OrePrefixes prefix : orePrefixBlacklist) prefix.mNotGeneratedItems.add(material);

        return material;
    }

    public MaterialBuilder setMetaItemSubID(int metaItemSubID) {
        this.metaItemSubID = metaItemSubID;
        return this;
    }

    public MaterialBuilder setIconSet(TextureSet iconSet) {
        this.iconSet = iconSet;
        return this;
    }

    public MaterialBuilder setDefaultLocalName(String defaultLocalName) {
        this.defaultLocalName = defaultLocalName;
        return this;
    }

    public MaterialBuilder setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Adds:
     * <ul>
     *   <li>{@link OrePrefixes#dustTiny}</li>
     *   <li>{@link OrePrefixes#dustSmall}</li>
     *   <li>{@link OrePrefixes#dust}</li>
     * </ul>
     */
    public MaterialBuilder addDustItems() {
        this.generateDustItems = true;
        return this;
    }

    public MaterialBuilder addMetalItems() {
        this.generateMetalItems = true;
        return this;
    }

    public MaterialBuilder addGemItems() {
        this.generateGemItems = true;
        return this;
    }

    public MaterialBuilder addOreItems() {
        this.generateOreItems = true;
        return this;
    }

    public MaterialBuilder addCell() {
        this.generateCell = true;
        return this;
    }

    public MaterialBuilder addPlasma() {
        this.generatePlasma = true;
        return this;
    }

    public MaterialBuilder addToolHeadItems() {
        this.generateToolHeadItems = true;
        return this;
    }

    public MaterialBuilder addGearItems() {
        this.generateGearItems = true;
        return this;
    }

    public MaterialBuilder addEmpty() {
        this.generateEmpty = true;
        return this;
    }

    public MaterialBuilder addFluid() {
        this.generateFluid = true;
        return this;
    }

    public MaterialBuilder addGas() {
        this.generateGas = true;
        return this;
    }

    /** Sets {@link MaterialBuilder#argb} and {@link MaterialBuilder#argbMolten}. */
    public MaterialBuilder setARGB(int argb) {
        this.argb = argb;
        this.argbMolten = argb;
        return this;
    }

    /** Use after {@link MaterialBuilder#setARGB(int)} to override {@link MaterialBuilder#argbMolten}. */
    public MaterialBuilder setMoltenARGB(int argb) {
        this.argbMolten = argb;
        return this;
    }

    /** Sets the Vanilla Minecraft color. Use the one that most closely resembles the color of the material. */
    public MaterialBuilder setColor(Dyes color) {
        this.color = color;
        return this;
    }

    public MaterialBuilder setTool(int durability, int quality, float speed) {
        this.toolDurability = durability;
        this.toolQuality = quality;
        this.toolSpeed = speed;
        return this;
    }

    public MaterialBuilder setToolEnchantment(Enchantment enchantment, int level) {
        this.toolEnchantment = enchantment;
        this.toolEnchantmentLevel = level;
        return this;
    }

    public MaterialBuilder setArmorEnchantment(Enchantment enchantment, int level) {
        this.armorEnchantment = enchantment;
        this.armorEnchantmentLevel = level;
        return this;
    }

    public MaterialBuilder setTurbine(float steamMultiplier, float gasMultiplier, float plasmaMultiplier) {
        this.steamMultiplier = steamMultiplier;
        this.gasMultiplier = gasMultiplier;
        this.plasmaMultiplier = plasmaMultiplier;
        return this;
    }

    public MaterialBuilder setFuel(FuelType fuelType, int fuelPower) {
        this.fuelType = fuelType;
        this.fuelPower = fuelPower;
        return this;
    }

    /** Sets the Heat Damage for this Material (negative = frost) */
    public MaterialBuilder setHeatDamage(float heatDamage) {
        this.heatDamage = heatDamage;
        return this;
    }

    public MaterialBuilder setMeltingPoint(int meltingPoint) {
        this.meltingPoint = meltingPoint;
        return this;
    }

    public MaterialBuilder setBlastFurnaceTemp(int blastFurnaceTemp) {
        this.blastFurnaceTemp = blastFurnaceTemp;
        return this;
    }

    public MaterialBuilder setBlastFurnaceRequired(boolean blastFurnaceRequired) {
        this.blastFurnaceRequired = blastFurnaceRequired;
        return this;
    }

    public MaterialBuilder setAutoGenerateBlastFurnaceRecipes(boolean autoGenerateBlastFurnaceRecipes) {
        this.autoGenerateBlastFurnaceRecipes = autoGenerateBlastFurnaceRecipes;
        return this;
    }

    public MaterialBuilder setAutoGeneratedVacuumFreezerRecipe(boolean autoGeneratedVacuumFreezerRecipes) {
        this.autoGeneratedVacuumFreezerRecipes = autoGeneratedVacuumFreezerRecipes;
        return this;
    }

    public MaterialBuilder setAutoGeneratedRecycleRecipes(boolean autoGeneratedRecycleRecipes) {
        this.autoGeneratedRecycleRecipes = autoGeneratedRecycleRecipes;
        return this;
    }

    public MaterialBuilder setDensity(int multiplier, int divider) {
        this.densityMultiplier = multiplier;
        this.densityDivider = divider;
        return this;
    }

    public MaterialBuilder addElectrolyzerRecipe() {
        extraData = extraData | 1;
        return this;
    }

    public MaterialBuilder addCentrifugeRecipe() {
        extraData = extraData | 2;
        return this;
    }

    public MaterialBuilder addCrackingRecipes() {
        this.canBeCracked = true;
        return this;
    }

    public MaterialBuilder addMaterial(Materials material, int amount) {
        this.materialList.add(new MaterialStack(material, amount));
        return this;
    }

    public MaterialBuilder setElement(Element element) {
        this.element = element;
        return this;
    }

    public MaterialBuilder setChemicalFormula(String chemicalFormula) {
        this.chemicalFormula = chemicalFormula;
        return this;
    }

    public MaterialBuilder addAspect(TCAspects aspect, int amount) {
        this.aspects.add(new TCAspects.TC_AspectStack(aspect, amount));
        return this;
    }

    public MaterialBuilder addSubTag(SubTag subTag) {
        this.subTags.add(subTag);
        return this;
    }

    public MaterialBuilder addOrePrefixBlacklist(OrePrefixes prefix) {
        this.orePrefixBlacklist.add(prefix);
        return this;
    }

    public MaterialBuilder addOreByproduct(Supplier<Materials> material) {
        pendingOreByproducts.add(material);
        return this;
    }

    public MaterialBuilder setSmeltingInto(Supplier<Materials> material) {
        pendingSmeltingInto = material;
        return this;
    }

    public MaterialBuilder setMaceratingInto(Supplier<Materials> material) {
        pendingMaceratingInto = material;
        return this;
    }

    public MaterialBuilder setArcSmeltingInto(Supplier<Materials> material) {
        pendingArcSmeltingInto = material;
        return this;
    }

    public MaterialBuilder setDirectSmelting(Supplier<Materials> material) {
        pendingDirectSmelting = material;
        return this;
    }

    public MaterialBuilder setCanBeCracked(boolean canBeCracked) {
        this.canBeCracked = canBeCracked;
        return this;
    }
}
